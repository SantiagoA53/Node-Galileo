{"version":3,"sources":["../../../lib/config/config.js"],"names":["path","require","debug","parse","dotenv","getEnvironment","process","env","NODE_ENV","initializeEnv","config","resolve","cwd","parseHerokuUrlIfPresent","url","DATABASE_URL","undefined","username","user","native","normalizePort","val","portNum","parseInt","Number","isNaN","initializeConfig","environment","dbConfig","SQL_USERNAME","password","SQL_PASSWORD","database","SQL_DATABASE","host","SQL_HOST","port","SQL_PORT","dialect","logging","seederStorage","SQL_TEST_DATABASE","db","PORT","module","exports"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAAP,CAAgCE,KAA9C;;AACA,MAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,cAAT,GAA0B;AACxB,SAAOC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,aAA/B;AACD;;AAED,SAASC,aAAT,GAAyB;AACvBL,EAAAA,MAAM,CAACM,MAAP,CAAc;AACZV,IAAAA,IAAI,EAAEA,IAAI,CAACW,OAAL,CAAaL,OAAO,CAACM,GAAR,EAAb,EAA6B,QAAOP,cAAc,EAAG,EAArD;AADM,GAAd;AAGD;;AAED,SAASQ,uBAAT,GAAmC;AACjC,QAAMC,GAAG,GAAGR,OAAO,CAACC,GAAR,CAAYQ,YAAxB;;AAEA,MAAID,GAAG,KAAKE,SAAZ,EAAuB;AACrB,WAAO,EAAP;AACD;;AAED,QAAMN,MAAM,GAAGP,KAAK,CAACW,GAAD,CAApB,CAPiC,CASjC;;AACA,SAAO,EACL,GAAGJ,MADE;AAELO,IAAAA,QAAQ,EAAEP,MAAM,CAACQ,IAFZ;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAAP;AAKD;;AAED,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,QAAMC,OAAO,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAxB;;AAEA,MAAIG,MAAM,CAACC,KAAP,CAAaH,OAAb,CAAJ,EAA2B;AACzB;AACA,WAAOD,GAAP;AACD;;AAED,MAAIC,OAAO,IAAI,CAAf,EAAkB;AAChB;AACA,WAAOA,OAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASI,gBAAT,GAA4B;AAC1B,QAAMC,WAAW,GAAGtB,cAAc,EAAlC;AACA,MAAIuB,QAAQ,GAAG;AACbX,IAAAA,QAAQ,EAAEX,OAAO,CAACC,GAAR,CAAYsB,YADT;AAEbC,IAAAA,QAAQ,EAAExB,OAAO,CAACC,GAAR,CAAYwB,YAFT;AAGbC,IAAAA,QAAQ,EAAE1B,OAAO,CAACC,GAAR,CAAY0B,YAHT;AAIbC,IAAAA,IAAI,EAAE5B,OAAO,CAACC,GAAR,CAAY4B,QAAZ,IAAwB,WAJjB;AAKbC,IAAAA,IAAI,EAAE9B,OAAO,CAACC,GAAR,CAAY8B,QAAZ,IAAwB,MALjB;AAMbC,IAAAA,OAAO,EAAE,YANI;AAObC,IAAAA,OAAO,EAAErC,KAAK,CAAC,WAAD;AAPD,GAAf;;AASA,MAAIyB,WAAW,KAAK,aAApB,EAAmC;AACjCC,IAAAA,QAAQ,CAACY,aAAT,GAAyB,WAAzB;AACD,GAFD,MAEO,IAAIb,WAAW,KAAK,MAApB,EAA4B;AACjCC,IAAAA,QAAQ,CAACI,QAAT,GACE1B,OAAO,CAACC,GAAR,CAAYkC,iBAAZ,IAAiCnC,OAAO,CAACC,GAAR,CAAY0B,YAD/C;AAED,GAHM,MAGA,IAAIN,WAAW,KAAK,YAApB,EAAkC;AACvCC,IAAAA,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAe,SAAGf,uBAAuB;AAAzC,KAAX;AACD;;AACD,SAAO;AACL6B,IAAAA,EAAE,EAAEd,QADC;AAELQ,IAAAA,IAAI,EAAEhB,aAAa,CAACd,OAAO,CAACC,GAAR,CAAYoC,IAAZ,IAAoB,MAArB;AAFd,GAAP;AAID;;AAEDlC,aAAa;AAEbmC,MAAM,CAACC,OAAP,GAAiBnB,gBAAgB,EAAjC","sourcesContent":["const path = require('path');\r\nconst debug = require('debug');\r\nconst parse = require('pg-connection-string').parse;\r\nconst dotenv = require('dotenv');\r\n\r\nfunction getEnvironment() {\r\n  return process.env.NODE_ENV || 'development';\r\n}\r\n\r\nfunction initializeEnv() {\r\n  dotenv.config({\r\n    path: path.resolve(process.cwd(), `.env.${getEnvironment()}`),\r\n  });\r\n}\r\n\r\nfunction parseHerokuUrlIfPresent() {\r\n  const url = process.env.DATABASE_URL;\r\n\r\n  if (url === undefined) {\r\n    return {};\r\n  }\r\n\r\n  const config = parse(url);\r\n\r\n  // Heroku necesita sí o sí SSL, y para eso hay que habilitar el driver nativo.\r\n  return {\r\n    ...config,\r\n    username: config.user,\r\n    native: true,\r\n  };\r\n}\r\n\r\nfunction normalizePort(val) {\r\n  const portNum = parseInt(val, 10);\r\n\r\n  if (Number.isNaN(portNum)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (portNum >= 0) {\r\n    // port number\r\n    return portNum;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction initializeConfig() {\r\n  const environment = getEnvironment();\r\n  let dbConfig = {\r\n    username: process.env.SQL_USERNAME,\r\n    password: process.env.SQL_PASSWORD,\r\n    database: process.env.SQL_DATABASE,\r\n    host: process.env.SQL_HOST || 'localhost',\r\n    port: process.env.SQL_PORT || '5432',\r\n    dialect: 'postgresql',\r\n    logging: debug('sequelize'),\r\n  };\r\n  if (environment === 'development') {\r\n    dbConfig.seederStorage = 'sequelize';\r\n  } else if (environment === 'test') {\r\n    dbConfig.database =\r\n      process.env.SQL_TEST_DATABASE || process.env.SQL_DATABASE;\r\n  } else if (environment === 'production') {\r\n    dbConfig = { ...dbConfig, ...parseHerokuUrlIfPresent() };\r\n  }\r\n  return {\r\n    db: dbConfig,\r\n    port: normalizePort(process.env.PORT || '3001'),\r\n  };\r\n}\r\n\r\ninitializeEnv();\r\n\r\nmodule.exports = initializeConfig();\r\n"],"file":"config.js"}