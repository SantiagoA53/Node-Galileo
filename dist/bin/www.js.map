{"version":3,"sources":["../../bin/www.js"],"names":["debug","server","http","createServer","app","port","get","db","sequelize","authenticate","then","listen","console","log","on","onError","onListening","error","syscall","bind","code","process","exit","addr","address"],"mappings":"AAAA;;AACA;;AACA;AACA;AACA;;;AAEA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,KAAK,GAAG,oBAAS,eAAT,CAAd;AAEA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGC,cAAKC,YAAL,CAAkBC,YAAlB,CAAf;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAGD,aAAIE,GAAJ,CAAQ,MAAR,CAAb;;AACA,IAAI,CAACD,IAAL,EAAW;AACT,QAAM,qDAAN;AACD,C,CAED;;;AACAE,gBAAGC,SAAH,CAAaC,YAAb,GAA4BC,IAA5B,CAAiC,MAAM;AACrCN,eAAIO,MAAJ,CAAWN,IAAX,EAAiB,MAAM;AACrBO,IAAAA,OAAO,CAACC,GAAR,CAAa,mDAAkDR,IAAK,EAApE;AACD,GAFD;AAGD,CAJD;;AAMAJ,MAAM,CAACa,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAd,MAAM,CAACa,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AAEA;AACA;AACA;;AAEA,SAASD,OAAT,CAAiBE,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,QAAME,IAAI,GAAG,OAAOd,IAAP,KAAgB,QAAhB,GAA4B,QAAOA,IAAK,EAAxC,GAA6C,QAAOA,IAAK,EAAtE,CALsB,CAOtB;;AACA,UAAQY,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACER,MAAAA,OAAO,CAACK,KAAR,CAAe,GAAEE,IAAK,+BAAtB;AACAE,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACEV,MAAAA,OAAO,CAACK,KAAR,CAAe,GAAEE,IAAK,oBAAtB;AACAE,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;AAED;AACA;AACA;;;AAEA,SAASD,WAAT,GAAuB;AACrB,QAAMO,IAAI,GAAGtB,MAAM,CAACuB,OAAP,EAAb;AACA,QAAML,IAAI,GAAG,OAAOI,IAAP,KAAgB,QAAhB,GAA4B,QAAOA,IAAK,EAAxC,GAA6C,QAAOA,IAAI,CAAClB,IAAK,EAA3E;AACAL,EAAAA,KAAK,CAAE,gBAAemB,IAAK,EAAtB,CAAL;AACD","sourcesContent":["#!/usr/bin/env node\r\n/* eslint-disable no-console */\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nimport debugPkg from 'debug';\r\nimport http from 'http';\r\nimport app from '../lib/app';\r\nimport db from '../lib/models';\r\n\r\nconst debug = debugPkg('js/www:server');\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nconst server = http.createServer(app);\r\n\r\n/**\r\n * Listen on the port set on the app, on all network interfaces.\r\n */\r\nconst port = app.get('port');\r\nif (!port) {\r\n  throw 'Â¡Â¡Hay que setear el port de la aplicaciÃ³n Express!!';\r\n}\r\n\r\n// Run sequelize before listen\r\ndb.sequelize.authenticate().then(() => {\r\n  app.listen(port, () => {\r\n    console.log(`Â¡AplicaciÃ³n iniciada! ====> ðŸŒŽ http://localhost:${port}`);\r\n  });\r\n});\r\n\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(`${bind} requires elevated privileges`);\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(`${bind} is already in use`);\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n  const addr = server.address();\r\n  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;\r\n  debug(`Listening on ${bind}`);\r\n}\r\n"],"file":"www.js"}